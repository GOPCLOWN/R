from db import Global, WhiteNumber
import urllib.request
import json
from bs4 import BeautifulSoup as bs
import requests
from datetime import timedelta, datetime


def CountUser():
    allUsers = Global.select().count()
    userBuy = Global.select().where(Global.license != '').count()
    userFree = Global.select().where(Global.license == '').count()
    return f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {allUsers} \n–ö—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∞—Ç: {userBuy}\n–ù–µ –∫—É–ø–∏–ª–∏ –ø—Ä–∏–≤–∞—Ç: {userFree}\n–ê—Ç–∞–∫—É—é—Ç: attack'


def getContact(number):
    try:
        num_name = []
        phone_ow = requests.get(f'https://phonebook.space/?number=%2B{number}').text
        content = bs(phone_ow, 'html.parser').find('div', class_='results')
        for i in content.find_all('li'):
            num_name.append(i.text.strip())
        if not num_name:
            return f'[+] –¢–µ–≥–∏ –ø–æ –Ω–æ–º–µ—Ä—É: –ù–µ—á–µ–≥–æ –Ω–µ—Ç'
        else:
            return '[+]'+' –¢–µ–≥–∏ —Å –Ω–æ–º–µ—Ä–∞: '+', '.join(num_name)
    except requests.exceptions.RequestException:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'


def informNumber(phone, send, chat_id, key):
    getInfo = "https://htmlweb.ru/geo/api.php?json&telcod=79227299015"
    try:
        infoPhone = urllib.request.urlopen(getInfo)
    except:
        return '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∏—Å–∫–æ–º –Ω–æ–º–µ—Ä–∞'
    infoPhone = json.load(infoPhone)
    send(chat_id, f"""–ù–æ–º–µ—Ä —Å–æ—Ç–æ–≤–æ–≥–æ: {phone}
–°—Ç—Ä–∞–Ω–∞: {infoPhone["country"]["name"]}
–†–µ–≥–∏–æ–Ω: {infoPhone["region"]["name"]}
–û–∫—Ä—É–≥: {infoPhone["region"]["okrug"]}
–û–ø–µ—Ä–∞—Ç–æ—Ä: {infoPhone["0"]["oper"]} 
–ß–∞—Å—Ç—å —Å–≤–µ—Ç–∞: {infoPhone["country"]["location"]}
------------------------------
{getContact(phone)}
""", reply_markup=key)


def buySubs(count, user_id, cost):
    user = Global.select().where(Global.user_id == user_id)
    if user[0].balance >= int(cost):
        Global.update(balance=Global.balance - int(cost)).where(Global.user_id == user_id).execute()
        if user[0].license == '':
            give = datetime.now() + timedelta(days=int(count))
            Global.update(license=give).where(Global.user_id == user_id).execute()
            return f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ {count} –¥–Ω(—è/–µ–π)'
        else:
            give = user[0].license + timedelta(days=int(count))
            Global.update(license=give).where(Global.user_id == user_id).execute()
            return f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ {count} –¥–Ω(—è/–µ–π)'
    else:
        return f'[üö´]–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n[üíµ]–í–∞—à –±–∞–ª–∞–Ω—Å: {user[0].balance}'


def statik(attack):
    f = open('proxy/proxy.txt', 'rb')
    proxy = len(f.readlines())
    f.close()
    allUsers = Global.select().count()
    allNumber = WhiteNumber.select().count()
    return f"""
üå™–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤ RU: 40
üôç‚Äç–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {allUsers}
‚ö°–í—Å–µ–≥–æ –ø—Ä–æ–∫—Å–∏: {proxy}
üí£–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞—Ç–∞–∫—É—é—Ç: {len(attack)}
üåû–ù–æ–º–µ—Ä–æ–≤ –≤ –±–µ–ª–æ–º –ª–∏—Å—Ç–µ: {allNumber}
"""