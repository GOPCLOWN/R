import telebot
from service import Spam
import os
from threading import Thread
from datetime import datetime, timedelta
from config import token, admin_id
from db import con, Global, WhiteNumber
import keyboard
import text
import time
import psutil as ps
import function
from proxy.proxyParsing import ParsingProxy

con()

startime = datetime.now()


class Telegs:
    def __init__(self, token, admin_id):
        self.admin_id = admin_id
        self.bot = telebot.TeleBot(token)
        self.send = self.bot.send_message
        self.next = self.bot.register_next_step_handler
        self.attack = []
        self.proxys = []

        @self.bot.message_handler(commands=['start'])
        def start(message):
            userInfo = Global.select().where(Global.user_id == message.from_user.id)
            chat_id = message.from_user.id
            if userInfo.exists():
                if userInfo[0].adm:
                    self.send(chat_id, '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏',
                              reply_markup=keyboard.userPanelAdm)
                else:
                    if chat_id == admin_id:
                        self.send(chat_id, '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏',
                                  reply_markup=keyboard.userPanelAdm)
                        Global.update(adm=True).where(Global.user_id == chat_id).execute()
                    else:
                        self.send(chat_id, '–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏',
                                  reply_markup=keyboard.userPanel)
            else:
                Global.create(
                    user_id=chat_id,
                )
                self.send(chat_id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â–µ —Ä–∞–∑')

        @self.bot.message_handler(content_types=['text'])
        def bot_one(message):
            userInfo = Global.select().where(Global.user_id == message.from_user.id)
            chat_id = message.from_user.id
            if userInfo.exists():
                chat_id = message.from_user.id
                if message.text == 'üíåSmS':
                    if userInfo[0].license == '':
                        self.send(chat_id, '[üö´]–£ –≤–∞—Å –Ω–µ—Ç—É –ª–∏—Ü–µ–Ω–∑–∏–∏')
                    else:
                        if userInfo[0].license > datetime.now():
                            if os.stat('proxy/proxy.txt').st_size > 0:
                                start = self.send(chat_id,
                                                  '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å 7 –∏ –∫–æ–ª-–≤–æ —Ü–∏–∫–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä 79999999999 60: ', reply_markup=keyboard.cancelButton2)
                                self.bot.register_next_step_handler(start, self.startSpam)
                            else:
                                self.send(chat_id, '[üö´]–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏!')
                        else:
                            Global.update(license='').where(Global.user_id == message.from_user.id).execute()
                            self.send(chat_id, '[üö´]–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏—Ü–µ–Ω–∑–∏—è')
                elif message.text == 'üî•–ù–∞—á–∞—Ç—å —Å–ø–∞–º':
                    self.send(chat_id, '[‚úÖ]–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏', reply_markup=keyboard.startSpam)
                elif message.text == 'üôé–ü—Ä–æ—Ñ–∏–ª—å':
                    if userInfo[0].license == '':
                        self.send(chat_id, text.profileNone.replace('{bal}', str(userInfo[0].balance)).replace('{id}', str(userInfo[0].id)).replace('{user_id}', str(userInfo[0].user_id)), parse_mode='HTML')
                    else:
                        day = userInfo[0].license - datetime.today()
                        self.send(chat_id, text.profile
                                  .replace('{bal}', str(userInfo[0].balance)).replace('{id}', str(userInfo[0].id)).replace('{user_id}', str(userInfo[0].user_id)).replace('{license}', str(day.days)), parse_mode='HTML')
                elif message.text == 'üëåSmS —Å–æ —Å–≤–æ–∏–º —Ç–µ–∫—Å—Ç–æ–º':
                    self.send(chat_id, '[‚ùó]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
                elif message.text == 'üìûCall':
                    self.send(chat_id, '[‚ùó]–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
                elif message.text == 'üí°–ë–µ–ª—ã–π –ª–∏—Å—Ç':
                    if userInfo[0].license != '':
                        if userInfo[0].license > datetime.now():
                            self.send(chat_id, '[‚úÖ]–í—ã –≤–æ—à–ª–∏ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–ª—ã–º –ª–∏—Å—Ç–æ–º', reply_markup=keyboard.whiteList)
                        else:
                            Global.update(license='').where(Global.user_id == message.from_user.id).execute()
                            self.send(chat_id, '[üö´]–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏—Ü–µ–Ω–∑–∏—è')
                    else:
                        self.send(chat_id, '[üö´]–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É')
                elif message.text == 'üîí–î–æ–±–∞–≤–∏—Ç—å':
                    number = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å 7: ')
                    self.bot.register_next_step_handler(number, self.addWhite)
                elif message.text == 'üîì–£–¥–∞–ª–∏—Ç—å':
                    number = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å 7: ')
                    self.bot.register_next_step_handler(number, self.delWhite)
                elif message.text == '‚ùå–í—ã–π—Ç–∏‚ùå':
                    if userInfo[0].adm:
                        self.send(chat_id, '[üö´]–í—ã –≤—ã—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.userPanelAdm)
                    else:
                        self.send(chat_id, '[üö´]–í—ã –≤—ã—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.userPanel)
                elif message.text == 'üëë–î–µ–∞–Ω–æ–Ω':
                    if userInfo[0].license != '':
                        if userInfo[0].license > datetime.now():
                            num = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ')
                            self.bot.register_next_step_handler(num, self.InformPhone)
                    else:
                        self.send(chat_id, '[üö´]–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—Ü–µ–Ω–∑–∏—è')
                elif message.text == 'üòé–ü–æ–¥–ø–∏—Å–∫–∏':
                    self.send(chat_id, '[‚úÖ]–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É[‚úÖ]', reply_markup=keyboard.subscription)
                elif message.text == 'üí∏–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                    self.send(chat_id, function.statik(self.attack))
                else:
                    if userInfo[0].adm:
                        adminCommand(message, userInfo, chat_id)
                    elif chat_id == admin_id:
                        adminCommand(message, userInfo, chat_id)
                    else:
                        self.send(chat_id, '[‚ùó]–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É!')
            else:
                self.send(chat_id, '[‚ùó]–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')

        def adminCommand(message, userInfo, chat_id):
            if message.text == '–í—ã–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é':
                reg = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', reply_markup=keyboard.cancelButton)
                self.next(reg, self.giveLicense_1)
            elif message.text == '–í—ã–¥–∞—Ç—å –±–∞–ª–∞–Ω—Å':
                addBalance = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', reply_markup=keyboard.cancelButton)
                self.bot.register_next_step_handler(addBalance, self.giveBalanceFirst)
            elif message.text == '–ó–∞–±—Ä–∞—Ç—å –±–∞–ª–∞–Ω—Å':
                delBalance = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', reply_markup=keyboard.cancelButton)
                self.bot.register_next_step_handler(delBalance, self.delBalanceFirst)
            elif message.text == 'ü•á–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—åü•á':
                self.send(chat_id, '[‚úÖ]–£—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=keyboard.adminPanel)
            elif message.text == '–ù–∞–∑–∞–¥':
                self.send(chat_id, '[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥', reply_markup=keyboard.userPanelAdm)
            elif message.text == '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏':
                Thread(target=ParsingProxy, args=(self.send, chat_id)).start()
            elif message.text == '–ó–∞–±—Ä–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é':
                delLicense = self.send(chat_id, '[‚úÖ]–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ', reply_markup=keyboard.cancelButton)
                self.bot.register_next_step_handler(delLicense, self.deleteLicense)
            elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                self.send(chat_id, function.CountUser().replace('attack', str(len(self.attack))))
            elif message.text == '–°–µ—Ä–≤–µ—Ä':
                self.send(chat_id, self.serverInform())

        @self.bot.callback_query_handler(func=lambda c: True)
        def inline(c):
            buy = telebot.types.InlineKeyboardMarkup(row_width=1)
            buy1 = telebot.types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'buy {c.data}')
            cancel = telebot.types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back')
            buy.add(buy1, cancel)
            if c.data == '1d':
                self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text='[‚úÖ]–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –¥–µ–Ω—å –∑–∞ 10 —Ä—É–±–ª–µ–π?\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è 10 —Ä—É–±–ª–µ–π', reply_markup=buy)
            elif c.data == '7d':
                self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text='[‚úÖ]–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π –∑–∞ 50 —Ä—É–±–ª–µ–π?\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è 50 —Ä—É–±–ª–µ–π', reply_markup=buy)
            elif c.data == '14d':
                self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text='[‚úÖ]–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 14 –¥–Ω–µ–π –∑–∞ 100 —Ä—É–±–ª–µ–π?\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è 100 —Ä—É–±–ª–µ–π', reply_markup=buy)
            elif c.data == '30d':
                self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text='[‚úÖ]–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π –∑–∞ 150 —Ä—É–±–ª–µ–π?\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è 150 —Ä—É–±–ª–µ–π', reply_markup=buy)
            elif c.data == 'always':
                self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text='[‚úÖ]–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ 300 —Ä—É–±–ª–µ–π?\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è 300 —Ä—É–±–ª–µ–π', reply_markup=buy)
            elif c.data == 'back':
                self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=keyboard.subscription)
            elif 'buy' in c.data:
                c.data = c.data.replace('buy ', '')
                if c.data == '1d':
                    self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text=function.buySubs(1, c.from_user.id, 10))
                elif c.data == '7d':
                    self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text=function.buySubs(7, c.from_user.id, 50))
                elif c.data == '14d':
                    self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text=function.buySubs(14, c.from_user.id, 100))
                elif c.data == '30d':
                    self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text=function.buySubs(30, c.from_user.id, 150))
                elif c.data == 'always':
                    self.bot.edit_message_text(chat_id=c.from_user.id, message_id=c.message.message_id, text=function.buySubs(9999, c.from_user.id, 300))
        while True:
            try:
                self.bot.infinity_polling()
            except Exception as e:
                self.send(admin_id, f'–ë–æ—Ç —É–º–µ—Ä: {e}')

    def serverInform(self):
        threads = ps.cpu_count(logical=False)
        lthreads = ps.cpu_count()
        RAM = ps.virtual_memory().percent
        cpu_percents = ps.cpu_percent(percpu=True)
        starttime = datetime.now() - startime
        cpupercents = ""
        for a in range(lthreads):
            cpupercents += "–ü–æ—Ç–æ–∫ : {} | –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å : {} %\n".format(a + 1, cpu_percents[a - 1])
        return """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º :
–Ø–¥–µ—Ä : {} | –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å : {}%
{}–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –û–ó–£ : {} %
–í—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å–æ —Å—Ç–∞—Ä—Ç–∞ : {} """.format(threads, ps.cpu_percent(), cpupercents, RAM,
                                                   "{} –¥–Ω–µ–π, {} —á–∞—Å–æ–≤, {} –º–∏–Ω—É—Ç.".format(starttime.days,
                                                                                               starttime.seconds // 3600,
                                                                                               (
                                                                                                       starttime.seconds % 3600) // 60))

    def addWhite(self, message):
        print(message.text)
        if message.text[0] == '7':
            if message.text.isdigit():
                WhiteNumber.create(
                    user_id=message.from_user.id,
                    number=message.text
                )
                self.send(message.from_user.id, f'[‚úÖ]–ù–æ–º–µ—Ä {message.text} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π –ª–∏—Å—Ç')
        else:
            self.send(message.from_user.id, '[üö´]–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É')

    def delWhite(self, message):
        if message.text[0] == '7':
            if message.text.isdigit():
                if WhiteNumber.select().where(WhiteNumber.number == message.text).exists():
                    if WhiteNumber.select().where(WhiteNumber.number == message.text)[0].user_id == message.from_user.id:
                        WhiteNumber.delete().where(WhiteNumber.number == message.text).execute()
                        self.send(message.from_user.id, f'[‚úÖ]–ù–æ–º–µ—Ä {message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–µ–ª–æ–≥–æ –ª–∏—Å—Ç–∞')
                    else:
                        self.send(message.from_user.id, '[üö´]–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º')
                else:
                    self.send(message.from_user.id, '[üö´]–ù–æ–º–µ—Ä –Ω–µ—Ç –≤ –±–µ–ª–æ–º –ª–∏—Å—Ç–µ!')
            else:
                self.send(message.from_user.id, '[üö´]–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä!')
        else:
            self.send(message.from_user.id, '[üö´]–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É')

    def delBalanceFirst(self, message):
        if message.text.isdigit():
            user = Global.select().where(Global.user_id == message.text)
            if user.exists():
                addBalance = self.send(message.from_user.id, f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[0].balance}\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ')
                self.bot.register_next_step_handler(addBalance, self.delBalanceTwo, message.text)
            else:
                self.send(message.from_user.id, '[üö´]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    def delBalanceTwo(self, message, user_id):
        if message.text.isdigit():
            user = Global.select().where(Global.user_id == user_id)
            if user[0].balance >= int(message.text):
                Global.update(balance=Global.balance - int(message.text)).where(Global.user_id == user_id).execute()
                self.send(message.from_user.id, f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ {message.text} —Ä—É–±–ª–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            else:
                self.send(message.from_user.id, f'[üö´]–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user[0].balance}', reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]–°—É–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    def giveBalanceFirst(self, message):
        if message.text.isdigit():
            if Global.select().where(Global.user_id == message.text).exists():
                addBalance = self.send(message.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É: ')
                self.bot.register_next_step_handler(addBalance, self.giveBalanceTwo, message.text)
            else:
                self.send(message.from_user.id, '[üö´]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    def giveBalanceTwo(self, message, user_id):
        if message.text.isdigit():
            Global.update(balance=Global.balance + int(message.text)).where(Global.user_id == user_id).execute()
            self.send(message.from_user.id, f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}\n–í—ã–¥–∞–ª–∏: {message.text}', reply_markup=keyboard.adminPanel)
            try:
                self.send(user_id, f'[‚úÖ]–í–∞–º –≤—ã–¥–∞–ª–∏ {message.text} —Ä—É–±–ª–µ–π –Ω–∞ –±–∞–ª–∞–Ω—Å')
            except Exception as e:
                pass
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[‚ùó]–°—É–º–º–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)

    def text_sms_one(self, message):
        if message.text[0] == '7':
            if message.text.isdigit() and len(message.text) == 11:
                pass
            else:
                pass


    def giveLicense_1(self, message):
        if message.text.isdigit():
            reg_2 = self.send(message.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π: ')
            self.next(reg_2, self.giveLicense_2, message.text)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[üö´]Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!', reply_markup=keyboard.adminPanel)

    def giveLicense_2(self, message, user_id):
        if message.text.isdigit():
            userGive = Global.select().where(Global.user_id == user_id)
            if userGive.execute():
                if userGive[0].license == '':
                    give = datetime.now() + timedelta(days=int(message.text))
                    Global.update(license=give).where(Global.user_id == user_id).execute()
                    self.send(message.from_user.id,
                              f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ {message.text} –¥–Ω(—è/–µ–π)', reply_markup=keyboard.adminPanel)
                    try:
                        self.send(user_id, f'[‚úÖ]–í–∞–º –≤—ã–¥–∞–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ {message.text} –¥–Ω(—è/–µ–π)')
                    except:
                        pass
                else:
                    give = userGive[0].license + timedelta(days=int(message.text))
                    Global.update(license=give).where(Global.user_id == user_id).execute()
                    self.send(message.from_user.id,
                              f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ {message.text} –¥–Ω(—è/–µ–π)',
                              reply_markup=keyboard.adminPanel)
                    try:
                        self.send(user_id, f'[‚úÖ]–í–∞–º –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ {message.text} –¥–Ω(—è/–µ–π)')
                    except:
                        pass
            else:
                self.send(message.from_user.id, '[üö´]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[üö´]–ö–æ–ª-–≤–æ –¥–Ω–µ–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!', reply_markup=keyboard.adminPanel)

    def InformPhone(self, message):
        if message.text[0] == '7':
            if message.text.isdigit():
                openAvito = telebot.types.InlineKeyboardMarkup(row_width=1)
                link = telebot.types.InlineKeyboardButton(text='–ü–æ–∏—Å–∫ –≤ Whats app',
                                                          url='https://api.whatsapp.com/send?phone=+{}'.format(
                                                              message.text))
                openAvito.add(link)
                self.send(message.from_user.id, '[‚ùó]–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–¥–µ—Ç –ø–æ–∏—Å–∫')
                Thread(target=function.informNumber, args=(message.text, self.send, message.from_user.id, openAvito)).start()
        else:
            self.send(message.from_user.id, '[‚ùó]–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7')

    def deleteLicense(self, message):
        if message.text.isdigit():
            info = Global.select().where(Global.user_id == message.text)
            if info.exists():
                Global.update(license='').where(Global.user_id == message.text).execute()
                self.send(message.from_user.id, f'[‚úÖ]–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.text}', reply_markup=keyboard.adminPanel)
            else:
                self.send(message.from_user.id, '[üö´]–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! Id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä', reply_markup=keyboard.adminPanel)
        elif message.text == 'üí¢–û—Ç–º–µ–Ω–∞üí¢':
            self.send(message.from_user.id, '[‚ùó]–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.adminPanel)
        else:
            self.send(message.from_user.id, '[üö´]–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', reply_markup=keyboard.adminPanel)

    def startSpam(self, message):
        userInfo = Global.select().where(Global.user_id == message.from_user.id)
        text = message.text.split(' ')
        if text[0][0] == '7':
            if len(text) > 1 and text[1].isdigit():
                if int(text[1]) < 60:
                    if text[0].isdigit() and len(text[0]) == 11:
                        if text[0] not in self.attack:
                            if not WhiteNumber.select().where(WhiteNumber.number == text[0]).exists():
                                x = Thread(target=self.startingSpam, args=(message.from_user.id, text[0], text[1]))
                                print(x)
                                print(f'–ó–∞–ø—É—â–µ–Ω —Å–ø–∞–º –Ω–∞ –Ω–æ–º–µ—Ä {text[0]} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}')
                            else:
                                self.send(message.from_user.id, '[üö´]–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤ –±–µ–ª–æ–º –ª–∏—Å—Ç–µ!', reply_markup=keyboard.startSpam)
                        else:
                            self.send(message.from_user.id, '[‚ùó]–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∞—Ç–∞–∫—É—é—Ç', reply_markup=keyboard.startSpam)
                    else:
                        self.send(message.from_user.id, '[üö´]–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', reply_markup=keyboard.startSpam)
                else:
                    self.send(message.from_user.id, '[‚ùó]–ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ 60 —Ü–∏–∫–ª–æ–≤',
                              reply_markup=keyboard.startSpam)
            else:
                self.send(message.from_user.id, '[üö´]–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard.startSpam)
        elif message.text == '‚ùå–í—ã–π—Ç–∏‚ùå':
            if userInfo[0].adm:
                self.send(message.from_user.id, '[‚ùó]–í—ã –≤—ã—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.userPanelAdm)
            else:
                self.send(message.from_user.id, '[‚ùó]–í—ã –≤—ã—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.userPanel)
        else:
            self.send(message.from_user.id, '[üö´]–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 7. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=keyboard.startSpam)

    def startingSpam(self, user_id, number, count):
        self.attack.append(user_id)
        self.send(user_id, '[‚úÖ]–°–ø–∞–º —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!', reply_markup=keyboard.startSpam)
        for i in range(int(count)):
            Spam(number)
            time.sleep(2)
        self.attack.remove(user_id)
        self.send(user_id, f'–°–ø–∞–º –Ω–∞ –Ω–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω')


Telegs(token, admin_id)
